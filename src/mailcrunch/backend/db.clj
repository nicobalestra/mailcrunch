(ns mailcrunch.backend.db
  (:use     [korma.db :only [defdb postgres]])
  (:require [korma.core :as kc]
						[clojure.walk :as cw]))

(defdb prod (postgres {:db "mailcrunch"
                       :user "mailcrunch"
                       :password "n1c013tt0."
                       :delimiters ""}))


(defmacro q-number-of [table-ref & query]
  `(let [basetmp# (-> (kc/select* ~table-ref)
                      (kc/aggregate (~'count :*) :count))]
    (if ~query
       (-> basetmp#
            (kc/where (first ~@query)))
      basetmp#)))

(defmacro q-get [table-ref & query]
  `(let [basetmp# (kc/select* ~table-ref)]
     (cond-> basetmp#
             (not (empty? ~query)) (kc/where (first ~@query)))))

(defn new-userdef-seq-val [entity]
	(let [seq-name (-> (:table entity)
										 (str "_userdef"))
				query (str "select nextval('public." seq-name "'::text)")]
		(println query)
		(kc/exec-raw query :results)
		))


(def insert-fns {
								 :set-creation-date (fn [entity] (fn [values] values))
                 :set-created-by (fn [entity] (fn [values] values))

                 :set-userdef-id (fn [entity]
                                   (let [seq-name (-> 	(:table entity)
                                                        (str "_userdef"))
                                         query    (str "select nextval('public." seq-name "'::text)")]
																		 (fn [values]
																			   (if-let [curr_userdef-id (:userdef_id values)]
                                           values
                                           (let [[{:keys [nextval]}] (kc/exec-raw query :results)]
                                             (assoc values :userdef_id nextval))))))

                 })



;I need to pass the entity to v# therefore the following doesn't work.
(defmacro insert-triggers
  "For every insert make sure we add all the mandatory fields which can be 
	 autogenerated (i.e. userdef_id, creation_date, etc..)"
  [entity]
	
  `(do ~@(for [[k v] (seq insert-fns)] 
          `(kc/prepare ~entity (~v ~entity)))))


